pub fn priv_to_pub(priv: Field) -> (Field, Field){
    let base_x = 5299619240641551281634865583518297030282874472190772894086521144482721001553;
    let base_y = 16950150798460657717958625567821834550301663161624707787222815936182638968203;

    let priv_bits: [u1; 254] = priv.to_be_bits::<254>();

    let mut result_x = base_x * (priv_bits[0] as Field);
    let mut result_y = base_y * (priv_bits[0] as Field);

    for i in 1..254{
        let tmp_double = add_zero(result_x, result_y, result_x, result_y);

        let tmp_add = add_zero(tmp_double.0, tmp_double.1, base_x * (priv_bits[i] as Field), base_y * (priv_bits[i] as Field));

        result_x = tmp_add.0;
        result_y = tmp_add.1;

    }


    (result_x, result_y)

}

pub fn add (x1: Field, y1: Field, x2: Field, y2: Field) -> (Field, Field){
    
    let a = 168700;
    let d = 168696;
    
    let beta = x1 * y2;

    let gamma = x2 * y1;

    let delta = (y1 - x1 * a) * (x2 + y2);

    let tau = beta * gamma;
    
    let x = (beta + gamma) / (1 + d * tau);
    
    let y = (delta + a * beta - gamma) / (1 - d * tau);

    (x,y)
}

pub fn add_zero(x1: Field, y1: Field, x2: Field, y2: Field) -> (Field, Field){
    
    let a = 168700;
    let d = 168696;
    
    let beta = x1 * y2;

    let gamma = x2 * y1;

    let delta = (y1 - x1 * a) * (x2 + y2);

    let tau = beta * gamma;
    
    let x = (beta + gamma) / (1 + d * tau);
    
    let y = (delta + a * beta - gamma) / (1 - d * tau);

    let is_zero_x = x.eq(0) as Field;
    let is_zero_y = y.eq(0) as Field;
    (x + is_zero_x * (x1 + x2), y + is_zero_y * (y1 + y2))
}

#[test]
fn test_add(){
    println(add(
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    ));
    println(add(
    0,
    0,
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    ));
    println(add(
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    0,
    0,
    ));
    println(add(
    0,
    0,
    0,
    0,
    ));
}


#[test]
fn test_add_zero(){
    println(add_zero(
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    ));
    println(add_zero(
    0,
    0,
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    ));
    println(add_zero(
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
    0,
    0,
    ));
    println(add_zero(
    0,
    0,
    0,
    0,
    ));
}

#[test]
fn test(){
    print(priv_to_pub(287325206580568373396753082727527032974277810276511506339905121597618812140));
}